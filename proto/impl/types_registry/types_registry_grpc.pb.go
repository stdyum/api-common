// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/source/types_registry/types_registry.proto

package types_registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TypesRegistryClient is the client API for TypesRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TypesRegistryClient interface {
	GetGroupsByIds(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Groups, error)
	GetRoomsByIds(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Rooms, error)
	GetStudentsByIds(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Students, error)
	GetSubjectsByIds(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Subjects, error)
	GetTeachersByIds(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Teachers, error)
}

type typesRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewTypesRegistryClient(cc grpc.ClientConnInterface) TypesRegistryClient {
	return &typesRegistryClient{cc}
}

func (c *typesRegistryClient) GetGroupsByIds(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := c.cc.Invoke(ctx, "/studyplaces.typesRegistry/GetGroupsByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesRegistryClient) GetRoomsByIds(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Rooms, error) {
	out := new(Rooms)
	err := c.cc.Invoke(ctx, "/studyplaces.typesRegistry/GetRoomsByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesRegistryClient) GetStudentsByIds(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Students, error) {
	out := new(Students)
	err := c.cc.Invoke(ctx, "/studyplaces.typesRegistry/GetStudentsByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesRegistryClient) GetSubjectsByIds(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Subjects, error) {
	out := new(Subjects)
	err := c.cc.Invoke(ctx, "/studyplaces.typesRegistry/GetSubjectsByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesRegistryClient) GetTeachersByIds(ctx context.Context, in *IdList, opts ...grpc.CallOption) (*Teachers, error) {
	out := new(Teachers)
	err := c.cc.Invoke(ctx, "/studyplaces.typesRegistry/GetTeachersByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypesRegistryServer is the server API for TypesRegistry service.
// All implementations must embed UnimplementedTypesRegistryServer
// for forward compatibility
type TypesRegistryServer interface {
	GetGroupsByIds(context.Context, *IdList) (*Groups, error)
	GetRoomsByIds(context.Context, *IdList) (*Rooms, error)
	GetStudentsByIds(context.Context, *IdList) (*Students, error)
	GetSubjectsByIds(context.Context, *IdList) (*Subjects, error)
	GetTeachersByIds(context.Context, *IdList) (*Teachers, error)
	mustEmbedUnimplementedTypesRegistryServer()
}

// UnimplementedTypesRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedTypesRegistryServer struct {
}

func (UnimplementedTypesRegistryServer) GetGroupsByIds(context.Context, *IdList) (*Groups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupsByIds not implemented")
}
func (UnimplementedTypesRegistryServer) GetRoomsByIds(context.Context, *IdList) (*Rooms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomsByIds not implemented")
}
func (UnimplementedTypesRegistryServer) GetStudentsByIds(context.Context, *IdList) (*Students, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsByIds not implemented")
}
func (UnimplementedTypesRegistryServer) GetSubjectsByIds(context.Context, *IdList) (*Subjects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjectsByIds not implemented")
}
func (UnimplementedTypesRegistryServer) GetTeachersByIds(context.Context, *IdList) (*Teachers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeachersByIds not implemented")
}
func (UnimplementedTypesRegistryServer) mustEmbedUnimplementedTypesRegistryServer() {}

// UnsafeTypesRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TypesRegistryServer will
// result in compilation errors.
type UnsafeTypesRegistryServer interface {
	mustEmbedUnimplementedTypesRegistryServer()
}

func RegisterTypesRegistryServer(s grpc.ServiceRegistrar, srv TypesRegistryServer) {
	s.RegisterService(&TypesRegistry_ServiceDesc, srv)
}

func _TypesRegistry_GetGroupsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesRegistryServer).GetGroupsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studyplaces.typesRegistry/GetGroupsByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesRegistryServer).GetGroupsByIds(ctx, req.(*IdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesRegistry_GetRoomsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesRegistryServer).GetRoomsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studyplaces.typesRegistry/GetRoomsByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesRegistryServer).GetRoomsByIds(ctx, req.(*IdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesRegistry_GetStudentsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesRegistryServer).GetStudentsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studyplaces.typesRegistry/GetStudentsByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesRegistryServer).GetStudentsByIds(ctx, req.(*IdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesRegistry_GetSubjectsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesRegistryServer).GetSubjectsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studyplaces.typesRegistry/GetSubjectsByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesRegistryServer).GetSubjectsByIds(ctx, req.(*IdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesRegistry_GetTeachersByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesRegistryServer).GetTeachersByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studyplaces.typesRegistry/GetTeachersByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesRegistryServer).GetTeachersByIds(ctx, req.(*IdList))
	}
	return interceptor(ctx, in, info, handler)
}

// TypesRegistry_ServiceDesc is the grpc.ServiceDesc for TypesRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TypesRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "studyplaces.typesRegistry",
	HandlerType: (*TypesRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroupsByIds",
			Handler:    _TypesRegistry_GetGroupsByIds_Handler,
		},
		{
			MethodName: "GetRoomsByIds",
			Handler:    _TypesRegistry_GetRoomsByIds_Handler,
		},
		{
			MethodName: "GetStudentsByIds",
			Handler:    _TypesRegistry_GetStudentsByIds_Handler,
		},
		{
			MethodName: "GetSubjectsByIds",
			Handler:    _TypesRegistry_GetSubjectsByIds_Handler,
		},
		{
			MethodName: "GetTeachersByIds",
			Handler:    _TypesRegistry_GetTeachersByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/source/types_registry/types_registry.proto",
}
