// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/source/types_registry/types_registry.proto

package types_registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TypesRegistryClient is the client API for TypesRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TypesRegistryClient interface {
	GetTypesByIds(ctx context.Context, in *TypesIds, opts ...grpc.CallOption) (*TypesModels, error)
	GetStudentsInGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*Students, error)
	GetStudentGroups(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*Groups, error)
}

type typesRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewTypesRegistryClient(cc grpc.ClientConnInterface) TypesRegistryClient {
	return &typesRegistryClient{cc}
}

func (c *typesRegistryClient) GetTypesByIds(ctx context.Context, in *TypesIds, opts ...grpc.CallOption) (*TypesModels, error) {
	out := new(TypesModels)
	err := c.cc.Invoke(ctx, "/studyplaces.typesRegistry/GetTypesByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesRegistryClient) GetStudentsInGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*Students, error) {
	out := new(Students)
	err := c.cc.Invoke(ctx, "/studyplaces.typesRegistry/GetStudentsInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typesRegistryClient) GetStudentGroups(ctx context.Context, in *StudentId, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := c.cc.Invoke(ctx, "/studyplaces.typesRegistry/GetStudentGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypesRegistryServer is the server API for TypesRegistry service.
// All implementations must embed UnimplementedTypesRegistryServer
// for forward compatibility
type TypesRegistryServer interface {
	GetTypesByIds(context.Context, *TypesIds) (*TypesModels, error)
	GetStudentsInGroup(context.Context, *GroupId) (*Students, error)
	GetStudentGroups(context.Context, *StudentId) (*Groups, error)
	mustEmbedUnimplementedTypesRegistryServer()
}

// UnimplementedTypesRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedTypesRegistryServer struct {
}

func (UnimplementedTypesRegistryServer) GetTypesByIds(context.Context, *TypesIds) (*TypesModels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypesByIds not implemented")
}
func (UnimplementedTypesRegistryServer) GetStudentsInGroup(context.Context, *GroupId) (*Students, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsInGroup not implemented")
}
func (UnimplementedTypesRegistryServer) GetStudentGroups(context.Context, *StudentId) (*Groups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentGroups not implemented")
}
func (UnimplementedTypesRegistryServer) mustEmbedUnimplementedTypesRegistryServer() {}

// UnsafeTypesRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TypesRegistryServer will
// result in compilation errors.
type UnsafeTypesRegistryServer interface {
	mustEmbedUnimplementedTypesRegistryServer()
}

func RegisterTypesRegistryServer(s grpc.ServiceRegistrar, srv TypesRegistryServer) {
	s.RegisterService(&TypesRegistry_ServiceDesc, srv)
}

func _TypesRegistry_GetTypesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypesIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesRegistryServer).GetTypesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studyplaces.typesRegistry/GetTypesByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesRegistryServer).GetTypesByIds(ctx, req.(*TypesIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesRegistry_GetStudentsInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesRegistryServer).GetStudentsInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studyplaces.typesRegistry/GetStudentsInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesRegistryServer).GetStudentsInGroup(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypesRegistry_GetStudentGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesRegistryServer).GetStudentGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studyplaces.typesRegistry/GetStudentGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesRegistryServer).GetStudentGroups(ctx, req.(*StudentId))
	}
	return interceptor(ctx, in, info, handler)
}

// TypesRegistry_ServiceDesc is the grpc.ServiceDesc for TypesRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TypesRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "studyplaces.typesRegistry",
	HandlerType: (*TypesRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTypesByIds",
			Handler:    _TypesRegistry_GetTypesByIds_Handler,
		},
		{
			MethodName: "GetStudentsInGroup",
			Handler:    _TypesRegistry_GetStudentsInGroup_Handler,
		},
		{
			MethodName: "GetStudentGroups",
			Handler:    _TypesRegistry_GetStudentGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/source/types_registry/types_registry.proto",
}
